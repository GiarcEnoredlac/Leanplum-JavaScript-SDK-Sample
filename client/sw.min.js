define(function() {
  return function(a) {
    function b(d) {
      if (c[d]) return c[d].exports;
      var e = c[d] = {
        i: d,
        l: !1,
        exports: {}
      };
      return a[d].call(e.exports, e, e.exports, b), e.l = !0, e.exports
    }
    var c = {};
    return b.m = a, b.c = c, b.i = function(a) {
      return a
    }, b.d = function(a, c, d) {
      b.o(a, c) || Object.defineProperty(a, c, {
        configurable: !1,
        enumerable: !0,
        get: d
      })
    }, b.n = function(a) {
      var c = a && a.__esModule ? function() {
        return a.default
      } : function() {
        return a
      };
      return b.d(c, "a", c), c
    }, b.o = function(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b)
    }, b.p = "", b(b.s = 1)
  }([function(a, b, c) {
    var d, e, f;
    ! function(c, g) {
      e = [a], d = g, void 0 !== (f = "function" == typeof d ? d.apply(b, e) : d) && (a.exports =
        f)
    }(0, function(a) {
      "use strict";
      a.exports = {
        METHODS: {
          START: "start",
          STOP: "stop",
          ADVANCE: "advance",
          TRACK: "track",
          PAUSE_SESSION: "pauseSession",
          RESUME_SESSION: "resumeSession",
          PAUSE_STATE: "pauseState",
          RESUME_STATE: "resumeState",
          DOWNLOAD_FILE: "downloadFile",
          MULTI: "multi",
          SET_VARS: "setVars",
          GET_VARS: "getVars",
          SET_USER_ATTRIBUTES: "setUserAttributes",
          SET_DEVICE_ATTRIBUTES: "setDeviceAttributes",
          UPLOAD_FILE: "uploadFile",
          REGISTER_DEVICE: "registerDevice"
        },
        SDK_VERSION: "1.1.10",
        CLIENT: "js",
        PARAMS: {
          ACTION: "action",
          APP_ID: "appId",
          CLIENT: "client",
          CLIENT_KEY: "clientKey",
          DEVICE_ID: "deviceId",
          SDK_VERSION: "sdkVersion",
          USER_ID: "userId",
          NEW_USER_ID: "newUserId",
          DEV_MODE: "devMode",
          VERSION_NAME: "versionName",
          SYSTEM_NAME: "systemName",
          SYSTEM_VERSION: "systemVersion",
          BROWSER_NAME: "browserName",
          BROWSER_VERSION: "browserVersion",
          DEVICE_NAME: "deviceName",
          DEVICE_MODEL: "deviceModel",
          USER_ATTRIBUTES: "userAttributes",
          LOCALE: "locale",
          COUNTRY: "country",
          REGION: "region",
          CITY: "city",
          LOCATION: "location",
          STATE: "state",
          INFO: "info",
          EVENT: "event",
          VALUE: "value",
          FILENAME: "filename",
          TIME: "time",
          DATA: "data",
          VARS: "vars",
          FILE: "file",
          SIZE: "size",
          VARIATION: "variation",
          HASH: "hash",
          EMAIL: "email",
          VARIABLES: "vars",
          PARAMS: "params",
          INCLUDE_DEFAULTS: "includeDefaults",
          WEB_PUSH_SUBSCRIPTION: "webPushSubscription"
        },
        KEYS: {
          IS_REGISTERED: "isRegistered",
          LATEST_VERSION: "latestVersion",
          VARS: "vars",
          VARIANTS: "variants",
          ACTION_METADATA: "actionMetadata",
          TOKEN: "token"
        },
        DEFAULT_KEYS: {
          COUNT: "__leanplum_unsynced",
          ITEM: "__leanplum_unsynced_",
          VARIABLES: "__leanplum_variables",
          VARIANTS: "__leanplum_variants",
          ACTION_METADATA: "__leanplum_action_metadata",
          TOKEN: "__leanplum_token",
          DEVICE_ID: "__leanplum_device_id",
          USER_ID: "__leanplum_user_id",
          PUSH_SUBSCRIPTION: "__leanplum_push_subscription"
        },
        VALUES: {
          DETECT: "(detect)"
        }
      }
    })
  }, function(a, b, c) {
    var d, e, f;
    ! function(g, h) {
      e = [c(0)], d = h, void 0 !== (f = "function" == typeof d ? d.apply(b, e) : d) && (
        a.exports = f)
    }(0, function(a) {
      "use strict";
      var b = function(a) {
          return a && a.__esModule ? a : {
            default: a
          }
        }(a),
        c = {};
      self.addEventListener("push", function(a) {
        var b = a.data && a.data.text() ? a.data.text() : null;
        if (!b) return void console.log(
          "Leanplum: Push received without payload, skipping display.");
        var d = JSON.parse(b);
        if (!d || !d.title || !d.tag) return void console.log(
          "Leanplum: No options, title or tag/id received, skipping display.");
        d.data && d.data.openAction && d.data.openAction.hasOwnProperty("__name__") &&
          "Open URL" === d.data.openAction.__name__ && d.data.openAction.hasOwnProperty(
            "URL") && (c[d.tag] = d.data.openAction.URL);
        var e = d.title;
        delete d.title, a.waitUntil(self.registration.showNotification(e, d))
      }), self.addEventListener("notificationclick", function(a) {
        if (console.log("Leanplum: [Service Worker] Notification click received."),
          a.notification.close(), !a.notification || !a.notification.tag) return void console
          .log(
            "Leanplum: No notification or tag/id received, skipping open action."
          );
        var d = a.notification.tag,
          e = c[d];
        if (!e) return void console.log(
          "Leanplum: [Service Worker] No action defined, doing nothing.");
        console.log(b.default.DEFAULT_KEYS.DEVICE_ID), console.log(localStorage.getItem(
          b.default.DEFAULT_KEYS.DEVICE_ID)), Leanplum.track(void 0, 0, void 0, {
          messageId: d
        }), delete c.notificationId, a.waitUntil(clients.openWindow(e))
      })
    })
  }])
});
